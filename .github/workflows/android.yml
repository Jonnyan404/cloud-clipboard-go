name: Build and Update Android Release

on:
  # 1. 当一个 Release 被发布时触发
  release:
    types: [published]
  
  # 2. 允许手动触发，并要求输入一个目标 tag
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'The existing tag to build for and update the release (e.g., v1.0.0)'
        required: true
        default: 'v4.5.26'

jobs:
  build-apk:
    name: Build APK for ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm64-v8a, armeabi-v7a]

    steps:
      - name: Determine Tag Name
        id: get_tag
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tag=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout repository at the specified tag
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get_tag.outputs.tag }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Node.js for frontend build
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: client/package.json

      - name: Build frontend static assets
        run: |
          cd client
          npm install
          npm run build

      - name: Prepare Go embed directory
        run: |
          rm -rf cloud-clip/static
          mkdir -p cloud-clip/static
          cp -r client/dist/* cloud-clip/static/

      - name: Install and initialize gomobile
        run: |
          go install golang.org/x/mobile/cmd/gomobile@latest
          export PATH=$PATH:$(go env GOPATH)/bin
          gomobile init

      - name: Build Go AAR package for ${{ matrix.arch }}
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          TARGET_ARCH=$([ "${{ matrix.arch }}" == "arm64-v8a" ] && echo "android/arm64" || echo "android/arm")
          cd cloud-clip/mobile
          gomobile bind -v -tags embed -androidapi 24 -o cloudclipservice.aar -target=$TARGET_ARCH -ldflags="-s -w" github.com/jonnyan404/cloud-clipboard-go/cloud-clip/mobile
          cp cloudclipservice.aar ../../android/app/libs/

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Decode Signing Key
        run: echo "${{ secrets.SIGNING_KEY_STORE_BASE64 }}" | base64 --decode > $GITHUB_WORKSPACE/android/app/my-release-key.keystore

      - name: List files for debugging
        run: |
          echo "--- Listing root directory contents: ---"
          ls -la
          echo "--- Listing android/ directory contents: ---"
          ls -la android/ || echo "android/ directory not found."

      - name: Make gradlew executable
        run: chmod +x ./android/gradlew

      - name: Build Android Release APK
        run: |
          cd android
          ./gradlew assembleRelease \
            -PabiFilters=${{ matrix.arch }} \
            -Psigning.key.alias=${{ secrets.SIGNING_KEY_ALIAS }} \
            -Psigning.key.password=${{ secrets.SIGNING_KEY_PASSWORD }} \
            -Psigning.store.file=app/my-release-key.keystore \
            -Psigning.store.password=${{ secrets.SIGNING_KEY_STORE_PASSWORD }} \
            --stacktrace
      
      - name: Rename APK
        run: |
          mv android/app/build/outputs/apk/release/app-release.apk cloud-clipboard-go-${{ steps.get_tag.outputs.tag }}-${{ matrix.arch }}.apk

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk-artifacts
          path: cloud-clipboard-go-${{ steps.get_tag.outputs.tag }}-${{ matrix.arch }}.apk

  # 单独的 job 用于更新 Release
  update-release:
    name: Update GitHub Release
    needs: build-apk
    runs-on: ubuntu-latest

    steps:
      - name: Download all APK artifacts
        uses: actions/download-artifact@v4
        with:
          name: apk-artifacts
          path: apks

      - name: Update Release with APKs
        uses: softprops/action-gh-release@v2
        with:
          # 查找所有下载的 APK 文件并上传
          files: apks/*.apk
          # 关键：设置为 true 以更新现有 Release，而不是创建新的
          prerelease: false
          draft: false